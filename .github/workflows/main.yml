name: Cl

on: 
  [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive ngrok.zip

    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Start ngrok Tunnel for RDP
      run: |
        # Start ngrok tunnel in the background
        Start-Process -NoNewWindow -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389" 
        Start-Sleep -Seconds 5  # Give ngrok time to establish the tunnel

    - name: Retrieve ngrok Public URL
      run: |
        # Query ngrok's API for the public URL (works via localhost:4040)
        $ngrokData = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels
        $ngrokUrl = $ngrokData.tunnels | Where-Object {$_.proto -eq 'tcp'} | Select-Object -ExpandProperty public_url
        Write-Output "The RDP public URL is: $ngrokUrl"

    - name: Output ngrok URL
      run: |
        echo "The public ngrok URL for RDP access is: ${{ steps.retrieve_ngrok_url.outputs.url }}"
